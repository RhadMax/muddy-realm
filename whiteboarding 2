so if a player's position were tracked in the memory of the server, it wouldn't need to interact with the database's players table at every move.

ways to have all players location update in real time:
    *have position tracked as a value in player table, and at every interval of play a select query is sent asking the server to return all players(and mobs, if that is being tracked also?) that have that same position value, then list them as being present in that position. any time player moves the position value in the players table would need to get updated, and then the table would need to get queried again for that position.

    *have position tracked as a variable in memory on server(or index.js whatever it may be) and then only update it to the database every so often, either as a value on player table or as a value in locations table... would not work for real time updates on multiple player locations in that case... if we want real time updates then the memory needs to be tracking all active players locations, which actually might still work fairly well....
        --expanding on this, player makes new char, create variable for player using constructor in script, that character is now 'online' in server code by existing in memory as a variable in the player{}, nested in the activePlayers[], and each player{} includes a location value. as other characters either make new chars or 'load' characters into play, they also become 'online' by being added to the memory of the running server as indexes of the players array. When they log out, that player is removed from the array and their data is stored in the players database.
        
        -- To cover server crash scenarios it would be wise to include a rollback/failsafe type feature which saves all players data in the sql database at certain time intervals, or maybe even every so often based on number of commands inputted by user (ie a counter variable that exists in each player's object, counts up with each action and at 10 or 20, or 50 who knows, gets set back to 0 and a update query is sent to the database for that player so no one ever loses too much progress in the event of a server crash or somehow otherwise untracked player 'logout'.) This would also benefit from having a timeout after any action inputted that will automatically log out a character that takes no action for an extended period of time.

        --this keeps memory use minimal for players while also allowing us quickly accesible data for logic actions like evaluating all players that are currently in a certain position. Sooo, player moves, their position keyed value updates within their player{}, players array is looped to show others who are there, (is this risky? lotta evaluations performed if many are online, as each player would result in a loop sorting through all online players and returning results every time they move---idea to help with this would be having multiple onlineplayer arrays, one for each region of the world. players{} could have another key that tells the server which array to sort through. updating that region key might be tricky... maybe 32x32 grids for each region for mapping purposes, or 1024 tiles per region, and if ).

    *have location table (or tables?) also have a column for tracking players currently occupying that location, so when data for flavor text is fetched upon moving it also returns a list of those present. In order for this to stay real time every single movement of any player/mob would need to update set, and then select from tables where position = that position. In fact, that would involve two subsequent update set queries back to back, one to remove the unit from the position it's moving from and one to update the position it's moving into to contain it, then the select to return who is currently there. I have a feeling this method would be the least efficient, since it would involve making multiple queries to what will invariably be the largest table of data.